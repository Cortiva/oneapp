// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  IT_MANAGER
}

enum DeviceStatus {
  AVAILABLE
  ASSIGNED
  MAINTENANCE
}

enum Location {
  UK
  IRELAND
  EU
  AFRICA
  AMERICA
  ASIA
}

enum EmployeeRole {
  DEVELOPER
  DESIGNER
  SALES
  MARKETING
  HUMAN_RESOURCES
  FINANCE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique @db.Text()
  createdAt DateTime @default(now())

  @@map("tokenBlacklists")
}

model User {
  id                        String        @id @default(cuid())
  email                     String        @unique
  password                  String
  role                      Role          @default(IT_MANAGER)
  lastLogin                 DateTime?
  isActive                  Boolean       @default(true)
  refreshToken              String?
  staffId                   String
  firstName                 String
  lastName                  String
  phoneNumber               String
  officeLocation            String?
  avatar                    String?       @default("https://res.cloudinary.com/etechds/image/upload/v1749650588/1_koh2sr.png")
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  resetToken                String?
  resetTokenExpiresAt       DateTime?
  accountStatus             AccountStatus @default(INACTIVE)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  employees                 Employee[]

  @@index([email, firstName, lastName, role])
  @@map("users")
}

model Device {
  id           String       @id @default(cuid())
  assignedToId String
  assignedTo   Employee     @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  model        String?
  manufacturer String?
  screenSize   String?
  processor    String?
  ram          Int
  storage      Int
  status       DeviceStatus @default(AVAILABLE)
  isDeleted    Boolean      @default(false)
  lastAssigned DateTime?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  locations     Location[]
  suitableRoles EmployeeRole[]

  @@index([id, model, manufacturer, screenSize, ram, storage])
  @@map("devices")
}

model Employee {
  id             String        @id @default(cuid())
  staffId        String
  firstName      String
  lastName       String
  email          String        @unique
  phoneNumber    String
  officeLocation String
  role           EmployeeRole?
  onboardingDate DateTime      @default(now())
  onboardedById  String
  onboardedBy    User          @relation(fields: [onboardedById], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  devices        Device[]
  avatar         String?

  @@index([firstName, lastName, email, phoneNumber, officeLocation, role])
  @@map("employees")
}
